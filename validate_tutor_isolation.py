"""
==============================================================================
SCRIPT DE VALIDACI√ìN - AISLAMIENTO DE DATOS ENTRE TUTORES
==============================================================================
Este script valida que cada tutor SOLO pueda ver los estudiantes que √©l cre√≥.

ESCENARIO DE PRUEBA:
- 5 Users totales
- 2 Tutores (Jos√© y Mar√≠a)
- 3 Students (Ana, Pedro, Luis)
- Jos√© cre√≥ a Ana (1 estudiante)
- Mar√≠a cre√≥ a Pedro y Luis (2 estudiantes)

VALIDACIONES:
‚úÖ Jos√© puede ver a Ana (su estudiante)
‚úÖ Jos√© NO puede ver a Pedro ni Luis (estudiantes de Mar√≠a)
‚úÖ Mar√≠a puede ver a Pedro y Luis (sus estudiantes)
‚úÖ Mar√≠a NO puede ver a Ana (estudiante de Jos√©)
‚úÖ tutor1.students.all() retorna SOLO sus estudiantes
‚úÖ tutor2.students.all() retorna SOLO sus estudiantes

INSTRUCCIONES:
1. Guardar este archivo como: validate_tutor_isolation.py
2. Editar l√≠neas 35 y 40 con nombres correctos de proyecto/app
3. Ejecutar: python validate_tutor_isolation.py
==============================================================================
"""

import os
import sys
import django

# ‚ö†Ô∏è CONFIGURACI√ìN - EDITAR ESTAS L√çNEAS
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'RulingoClub.settings')  
django.setup()

from django.contrib.auth.models import User
from django.db.models import Q

# ‚ö†Ô∏è CONFIGURACI√ìN - EDITAR ESTA L√çNEA
from accounts.models import Tutor, Student  


# ==============================================================================
# UTILIDADES PARA PRINTS CLAROS
# ==============================================================================

def print_header(text):
    """Imprime un header visual"""
    print("\n" + "=" * 80)
    print(f"  {text}")
    print("=" * 80)


def print_section(text):
    """Imprime una secci√≥n"""
    print("\n" + "-" * 80)
    print(f"  {text}")
    print("-" * 80)


def print_success(message):
    """Imprime mensaje de √©xito"""
    print(f"‚úÖ {message}")


def print_error(message):
    """Imprime mensaje de error"""
    print(f"‚ùå {message}")


def print_info(message):
    """Imprime informaci√≥n"""
    print(f"‚ÑπÔ∏è  {message}")


def print_data(label, value):
    """Imprime datos formateados"""
    print(f"   üìä {label}: {value}")


# ==============================================================================
# SETUP: CREAR DATOS DE PRUEBA
# ==============================================================================

def setup_test_data():
    """
    Crea el escenario de prueba:
    - 2 Tutores
    - 3 Estudiantes distribuidos entre los tutores
    """
    print_header("PASO 1: CREANDO DATOS DE PRUEBA")
    
    # Limpiar datos previos si existen
    print_info("Limpiando datos de pruebas anteriores...")
    Student.objects.filter(user__username__startswith='test_iso_').delete()
    Tutor.objects.filter(user__username__startswith='test_iso_').delete()
    User.objects.filter(username__startswith='test_iso_').delete()
    print_success("Limpieza completada")
    
    print_section("Creando Tutores")
    
    # TUTOR 1: Jos√©
    user_jose = User.objects.create_user(
        username='test_iso_jose',
        email='jose@example.com',
        password='password123',
        first_name='Jos√©',
        last_name='Garc√≠a'
    )
    tutor_jose = Tutor.objects.create(
        user=user_jose,
        bio='Profesor de ruso con 5 a√±os de experiencia',
        experience_years=5
    )
    print_success(f"Tutor 1 creado: {tutor_jose}")
    print_data("Username", user_jose.username)
    print_data("ID", tutor_jose.id)
    
    # TUTOR 2: Mar√≠a
    user_maria = User.objects.create_user(
        username='test_iso_maria',
        email='maria@example.com',
        password='password123',
        first_name='Mar√≠a',
        last_name='L√≥pez'
    )
    tutor_maria = Tutor.objects.create(
        user=user_maria,
        bio='Profesora de ruso nativa',
        experience_years=10
    )
    print_success(f"Tutor 2 creado: {tutor_maria}")
    print_data("Username", user_maria.username)
    print_data("ID", tutor_maria.id)
    
    print_section("Creando Estudiantes")
    
    # ESTUDIANTE 1: Ana (creado por Jos√©)
    user_ana = User.objects.create_user(
        username='test_iso_ana',
        email='ana@example.com',
        password='password123',
        first_name='Ana',
        last_name='Mart√≠nez'
    )
    student_ana = Student.objects.create(
        user=user_ana,
        created_by=tutor_jose  # ‚Üê Jos√© es el creador
    )
    print_success(f"Estudiante 1 creado: {student_ana}")
    print_data("Creado por", student_ana.created_by)
    print_data("ID", student_ana.id)
    
    # ESTUDIANTE 2: Pedro (creado por Mar√≠a)
    user_pedro = User.objects.create_user(
        username='test_iso_pedro',
        email='pedro@example.com',
        password='password123',
        first_name='Pedro',
        last_name='Rodr√≠guez'
    )
    student_pedro = Student.objects.create(
        user=user_pedro,
        created_by=tutor_maria  # ‚Üê Mar√≠a es la creadora
    )
    print_success(f"Estudiante 2 creado: {student_pedro}")
    print_data("Creado por", student_pedro.created_by)
    print_data("ID", student_pedro.id)
    
    # ESTUDIANTE 3: Luis (creado por Mar√≠a)
    user_luis = User.objects.create_user(
        username='test_iso_luis',
        email='luis@example.com',
        password='password123',
        first_name='Luis',
        last_name='Fern√°ndez'
    )
    student_luis = Student.objects.create(
        user=user_luis,
        created_by=tutor_maria  # ‚Üê Mar√≠a es la creadora
    )
    print_success(f"Estudiante 3 creado: {student_luis}")
    print_data("Creado por", student_luis.created_by)
    print_data("ID", student_luis.id)
    
    print_section("Resumen de Datos Creados")
    print_data("Total Tutores", 2)
    print_data("Total Estudiantes", 3)
    print_data("Estudiantes de Jos√©", tutor_jose.students.count())
    print_data("Estudiantes de Mar√≠a", tutor_maria.students.count())
    
    return {
        'tutor_jose': tutor_jose,
        'tutor_maria': tutor_maria,
        'student_ana': student_ana,
        'student_pedro': student_pedro,
        'student_luis': student_luis
    }


# ==============================================================================
# TEST 1: JOS√â SOLO VE A ANA (SU ESTUDIANTE)
# ==============================================================================

def test_jose_sees_only_ana(data):
    """
    Valida que Jos√© solo puede ver a Ana, su estudiante.
    NO debe ver a Pedro ni Luis (estudiantes de Mar√≠a).
    """
    print_header("TEST 1: Jos√© solo ve a Ana (su estudiante)")
    
    tutor_jose = data['tutor_jose']
    student_ana = data['student_ana']
    student_pedro = data['student_pedro']
    student_luis = data['student_luis']
    
    passed = True
    
    # Obtener estudiantes de Jos√© usando related_name
    estudiantes_jose = tutor_jose.students.all()
    
    print_section("Estudiantes visibles para Jos√©")
    print_data("Total estudiantes", estudiantes_jose.count())
    
    if estudiantes_jose.count() == 0:
        print_error("Jos√© NO tiene estudiantes visibles")
        return False
    
    for student in estudiantes_jose:
        print_info(f"  - {student}")
    
    print_section("Validaciones de Acceso")
    
    # ‚úÖ Jos√© DEBE ver a Ana
    if student_ana in estudiantes_jose:
        print_success("Jos√© PUEDE ver a Ana (correcto)")
    else:
        print_error("Jos√© NO PUEDE ver a Ana (incorrecto - es su estudiante)")
        passed = False
    
    # ‚úÖ Jos√© NO debe ver a Pedro
    if student_pedro not in estudiantes_jose:
        print_success("Jos√© NO PUEDE ver a Pedro (correcto - no es su estudiante)")
    else:
        print_error("Jos√© PUEDE ver a Pedro (incorrecto - es estudiante de Mar√≠a)")
        passed = False
    
    # ‚úÖ Jos√© NO debe ver a Luis
    if student_luis not in estudiantes_jose:
        print_success("Jos√© NO PUEDE ver a Luis (correcto - no es su estudiante)")
    else:
        print_error("Jos√© PUEDE ver a Luis (incorrecto - es estudiante de Mar√≠a)")
        passed = False
    
    # ‚úÖ Verificar que solo tiene 1 estudiante
    if estudiantes_jose.count() == 1:
        print_success("Jos√© ve exactamente 1 estudiante (correcto)")
    else:
        print_error(f"Jos√© ve {estudiantes_jose.count()} estudiantes (deber√≠a ver solo 1)")
        passed = False
    
    return passed


# ==============================================================================
# TEST 2: MAR√çA SOLO VE A PEDRO Y LUIS (SUS ESTUDIANTES)
# ==============================================================================

def test_maria_sees_only_pedro_and_luis(data):
    """
    Valida que Mar√≠a solo puede ver a Pedro y Luis, sus estudiantes.
    NO debe ver a Ana (estudiante de Jos√©).
    """
    print_header("TEST 2: Mar√≠a solo ve a Pedro y Luis (sus estudiantes)")
    
    tutor_maria = data['tutor_maria']
    student_ana = data['student_ana']
    student_pedro = data['student_pedro']
    student_luis = data['student_luis']
    
    passed = True
    
    # Obtener estudiantes de Mar√≠a usando related_name
    estudiantes_maria = tutor_maria.students.all()
    
    print_section("Estudiantes visibles para Mar√≠a")
    print_data("Total estudiantes", estudiantes_maria.count())
    
    if estudiantes_maria.count() == 0:
        print_error("Mar√≠a NO tiene estudiantes visibles")
        return False
    
    for student in estudiantes_maria:
        print_info(f"  - {student}")
    
    print_section("Validaciones de Acceso")
    
    # ‚úÖ Mar√≠a DEBE ver a Pedro
    if student_pedro in estudiantes_maria:
        print_success("Mar√≠a PUEDE ver a Pedro (correcto)")
    else:
        print_error("Mar√≠a NO PUEDE ver a Pedro (incorrecto - es su estudiante)")
        passed = False
    
    # ‚úÖ Mar√≠a DEBE ver a Luis
    if student_luis in estudiantes_maria:
        print_success("Mar√≠a PUEDE ver a Luis (correcto)")
    else:
        print_error("Mar√≠a NO PUEDE ver a Luis (incorrecto - es su estudiante)")
        passed = False
    
    # ‚úÖ Mar√≠a NO debe ver a Ana
    if student_ana not in estudiantes_maria:
        print_success("Mar√≠a NO PUEDE ver a Ana (correcto - no es su estudiante)")
    else:
        print_error("Mar√≠a PUEDE ver a Ana (incorrecto - es estudiante de Jos√©)")
        passed = False
    
    # ‚úÖ Verificar que solo tiene 2 estudiantes
    if estudiantes_maria.count() == 2:
        print_success("Mar√≠a ve exactamente 2 estudiantes (correcto)")
    else:
        print_error(f"Mar√≠a ve {estudiantes_maria.count()} estudiantes (deber√≠a ver solo 2)")
        passed = False
    
    return passed


# ==============================================================================
# TEST 3: VERIFICAR CAMPO created_by CORRECTAMENTE ASIGNADO
# ==============================================================================

def test_created_by_field(data):
    """
    Valida que el campo created_by apunta al tutor correcto.
    """
    print_header("TEST 3: Campo created_by correctamente asignado")
    
    tutor_jose = data['tutor_jose']
    tutor_maria = data['tutor_maria']
    student_ana = data['student_ana']
    student_pedro = data['student_pedro']
    student_luis = data['student_luis']
    
    passed = True
    
    print_section("Verificando created_by de cada estudiante")
    
    # Ana ‚Üí Jos√©
    if student_ana.created_by == tutor_jose:
        print_success(f"Ana.created_by = {student_ana.created_by} (correcto)")
    else:
        print_error(f"Ana.created_by = {student_ana.created_by} (deber√≠a ser {tutor_jose})")
        passed = False
    
    # Pedro ‚Üí Mar√≠a
    if student_pedro.created_by == tutor_maria:
        print_success(f"Pedro.created_by = {student_pedro.created_by} (correcto)")
    else:
        print_error(f"Pedro.created_by = {student_pedro.created_by} (deber√≠a ser {tutor_maria})")
        passed = False
    
    # Luis ‚Üí Mar√≠a
    if student_luis.created_by == tutor_maria:
        print_success(f"Luis.created_by = {student_luis.created_by} (correcto)")
    else:
        print_error(f"Luis.created_by = {student_luis.created_by} (deber√≠a ser {tutor_maria})")
        passed = False
    
    return passed


# ==============================================================================
# TEST 4: FILTRADO CON QUERYSET (SIMULANDO ADMIN)
# ==============================================================================

def test_queryset_filtering(data):
    """
    Simula c√≥mo se filtrar√≠a en el Admin usando get_queryset().
    Valida que cada tutor solo obtiene sus estudiantes.
    """
    print_header("TEST 4: Filtrado con QuerySet (simulando Admin)")
    
    tutor_jose = data['tutor_jose']
    tutor_maria = data['tutor_maria']
    
    passed = True
    
    print_section("Filtrado para Jos√©")
    
    # Simular get_queryset() del Admin para Jos√©
    queryset_jose = Student.objects.filter(created_by=tutor_jose)
    print_data("Estudiantes en queryset", queryset_jose.count())
    
    for student in queryset_jose:
        print_info(f"  - {student}")
    
    if queryset_jose.count() == 1:
        print_success("Queryset de Jos√© contiene 1 estudiante (correcto)")
    else:
        print_error(f"Queryset de Jos√© contiene {queryset_jose.count()} estudiantes (deber√≠a ser 1)")
        passed = False
    
    print_section("Filtrado para Mar√≠a")
    
    # Simular get_queryset() del Admin para Mar√≠a
    queryset_maria = Student.objects.filter(created_by=tutor_maria)
    print_data("Estudiantes en queryset", queryset_maria.count())
    
    for student in queryset_maria:
        print_info(f"  - {student}")
    
    if queryset_maria.count() == 2:
        print_success("Queryset de Mar√≠a contiene 2 estudiantes (correcto)")
    else:
        print_error(f"Queryset de Mar√≠a contiene {queryset_maria.count()} estudiantes (deber√≠a ser 2)")
        passed = False
    
    return passed


# ==============================================================================
# TEST 5: VERIFICAR QUE NO HAY "LEAKAGE" DE DATOS
# ==============================================================================

def test_no_data_leakage(data):
    """
    Verifica que no existe forma de que un tutor acceda a estudiantes de otro.
    """
    print_header("TEST 5: Verificar que no hay filtraci√≥n de datos")
    
    tutor_jose = data['tutor_jose']
    tutor_maria = data['tutor_maria']
    student_ana = data['student_ana']
    student_pedro = data['student_pedro']
    
    passed = True
    
    print_section("Intentar acceder a estudiante de otro tutor")
    
    # Jos√© intenta acceder a Pedro (estudiante de Mar√≠a) por ID
    try:
        # Simular: Jos√© intenta obtener Student.objects.get(id=pedro.id)
        # En el Admin con get_queryset() esto fallar√≠a
        student_found = Student.objects.filter(
            id=student_pedro.id,
            created_by=tutor_jose
        ).first()
        
        if student_found is None:
            print_success("Jos√© NO puede acceder a Pedro por ID con filtro de created_by (correcto)")
        else:
            print_error("Jos√© PUEDE acceder a Pedro (incorrecto - filtraci√≥n de datos)")
            passed = False
            
    except Exception as e:
        print_success(f"Acceso bloqueado correctamente: {e}")
    
    # Mar√≠a intenta acceder a Ana (estudiante de Jos√©) por ID
    try:
        student_found = Student.objects.filter(
            id=student_ana.id,
            created_by=tutor_maria
        ).first()
        
        if student_found is None:
            print_success("Mar√≠a NO puede acceder a Ana por ID con filtro de created_by (correcto)")
        else:
            print_error("Mar√≠a PUEDE acceder a Ana (incorrecto - filtraci√≥n de datos)")
            passed = False
            
    except Exception as e:
        print_success(f"Acceso bloqueado correctamente: {e}")
    
    return passed


# ==============================================================================
# CLEANUP: LIMPIAR DATOS DE PRUEBA
# ==============================================================================

def cleanup(data):
    """
    Limpia todos los datos de prueba creados.
    """
    print_header("LIMPIANDO DATOS DE PRUEBA")
    
    try:
        # Orden correcto: Students ‚Üí Tutors ‚Üí Users
        Student.objects.filter(user__username__startswith='test_iso_').delete()
        print_success("Estudiantes eliminados")
        
        Tutor.objects.filter(user__username__startswith='test_iso_').delete()
        print_success("Tutores eliminados")
        
        User.objects.filter(username__startswith='test_iso_').delete()
        print_success("Usuarios eliminados")
        
        print_success("Limpieza completada exitosamente")
        
    except Exception as e:
        print_error(f"Error durante limpieza: {e}")


# ==============================================================================
# MAIN: EJECUTAR TODOS LOS TESTS
# ==============================================================================

def main():
    """
    Ejecuta todos los tests de aislamiento de datos.
    """
    print_header("VALIDACI√ìN DE AISLAMIENTO DE DATOS ENTRE TUTORES")
    print_info("Objetivo: Verificar que cada tutor SOLO ve sus propios estudiantes")
    print_info("Escenario: 2 tutores, 3 estudiantes distribuidos")
    
    # Setup
    data = setup_test_data()
    
    # Ejecutar tests
    total_tests = 5
    passed_tests = 0
    
    if test_jose_sees_only_ana(data):
        passed_tests += 1
    
    if test_maria_sees_only_pedro_and_luis(data):
        passed_tests += 1
    
    if test_created_by_field(data):
        passed_tests += 1
    
    if test_queryset_filtering(data):
        passed_tests += 1
    
    if test_no_data_leakage(data):
        passed_tests += 1
    
    # Cleanup
    cleanup(data)
    
    # Resumen final
    print_header("RESUMEN DE VALIDACI√ìN")
    print(f"\n{'='*80}")
    print(f"  TESTS EJECUTADOS: {total_tests}")
    print(f"  TESTS PASADOS:    {passed_tests}")
    print(f"  TESTS FALLIDOS:   {total_tests - passed_tests}")
    print(f"{'='*80}\n")
    
    if passed_tests == total_tests:
        print("üéâ ¬°PERFECTO! El aislamiento de datos funciona correctamente")
        print("‚úÖ Cada tutor solo puede ver sus propios estudiantes")
        print("‚úÖ No hay filtraci√≥n de datos entre tutores")
        print("‚úÖ El campo created_by funciona correctamente")
        print("\nüìã Este es un requisito CR√çTICO de seguridad cumplido")
    else:
        print("‚ö†Ô∏è  ALERTA: Algunos tests de aislamiento fallaron")
        print("üîí Revisa los errores - esto es un problema de SEGURIDAD")
        print("üîß Debes corregir antes de continuar con Issue #2")
    
    print("\n" + "="*80 + "\n")


if __name__ == '__main__':
    main()
